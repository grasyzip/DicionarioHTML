<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sintaxe JavaScript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        code {
            background-color: #f4f4f4;
            padding: 2px 5px;
            border-radius: 3px;
        }
        pre {
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <h1>Sintaxe Básica do JavaScript</h1>
    
    <h2>1. Declaração de Variáveis</h2>
    <pre><code>// Formas de declarar variáveis
let nome = "João";  // variável que pode ser alterada
const PI = 3.14;    // constante não pode ser alterada
var idade = 30;     // forma antiga (evitar usar)</code></pre>

    <h2>2. Tipos de Dados</h2>
    <pre><code>// Tipos primitivos
let texto = "Olá mundo";  // String
let numero = 42;          // Number
let verdadeiro = true;    // Boolean
let nulo = null;          // Null
let indefinido;           // Undefined</code></pre>

    <h2>3. Operadores</h2>
    <pre><code>// Operadores aritméticos
let soma = 5 + 3;   // 8
let subtracao = 5 - 3; // 2

// Operadores de comparação
console.log(5 == "5");  // true (compara valor)
console.log(5 === "5"); // false (compara valor e tipo)</code></pre>

    <h2>4. Estruturas de Controle</h2>
    <pre><code>// Condicional if
if (idade >= 18) {
    console.log("Maior de idade");
} else {
    console.log("Menor de idade");
}

// Loop for
for (let i = 0; i < 5; i++) {
    console.log(i);
}</code></pre>

    <script>
        // Exemplo prático
        let nome = prompt("Qual seu nome?");
        alert(`Olá, ${nome}! Bem-vindo ao tutorial de sintaxe JavaScript.`);
    </script>
</body>
</html>



manipulacao
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manipulação do DOM</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        #conteudo {
            background-color: #f0f0f0;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
        }
        button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <h1>Manipulação do DOM com JavaScript</h1>
    
    <div id="conteudo">
        <p>Este é um parágrafo dentro da div.</p>
    </div>
    
    <button onclick="alterarConteudo()">Alterar Conteúdo</button>
    <button onclick="adicionarElemento()">Adicionar Elemento</button>
    <button onclick="removerElemento()">Remover Elemento</button>
    <button onclick="alterarEstilo()">Alterar Estilo</button>
    
    <h2>Exemplos de Manipulação</h2>
    <pre><code>// Selecionar elementos
const div = document.getElementById('conteudo');
const paragrafo = document.querySelector('#conteudo p');

// Alterar conteúdo
div.innerHTML = '&lt;p&gt;Novo conteúdo&lt;/p&gt;';

// Adicionar elemento
const novoElemento = document.createElement('span');
novoElemento.textContent = 'Texto do span';
div.appendChild(novoElemento);

// Alterar estilo
div.style.backgroundColor = 'lightblue';</code></pre>

    <script>
        function alterarConteudo() {
            document.getElementById('conteudo').innerHTML = '<h3>Conteúdo alterado com sucesso!</h3><p>O JavaScript permite modificar o HTML dinamicamente.</p>';
        }
        
        function adicionarElemento() {
            const novoItem = document.createElement('li');
            novoItem.textContent = 'Novo item adicionado em: ' + new Date().toLocaleTimeString();
            document.getElementById('conteudo').appendChild(novoItem);
        }
        
        function removerElemento() {
            const conteudo = document.getElementById('conteudo');
            if (conteudo.lastChild) {
                conteudo.removeChild(conteudo.lastChild);
            }
        }
        
        function alterarEstilo() {
            const conteudo = document.getElementById('conteudo');
            conteudo.style.backgroundColor = getRandomColor();
            conteudo.style.padding = '20px';
            conteudo.style.border = '2px solid #333';
        }
        
        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
    </script>
</body>
</html>


eventos
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eventos em JavaScript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        #area-interacao {
            width: 300px;
            height: 150px;
            border: 2px dashed #333;
            margin: 20px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f9f9f9;
        }
        button {
            padding: 8px 15px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background-color: #0b7dda;
        }
        input {
            padding: 8px;
            margin: 10px 0;
            width: 200px;
        }
    </style>
</head>
<body>
    <h1>Eventos em JavaScript</h1>
    
    <h2>Tipos Comuns de Eventos</h2>
    <ul>
        <li>Eventos de mouse (click, mouseover, mouseout)</li>
        <li>Eventos de teclado (keydown, keyup)</li>
        <li>Eventos de formulário (submit, change, focus)</li>
        <li>Eventos de janela (load, resize)</li>
    </ul>
    
    <div id="area-interacao">Passe o mouse aqui</div>
    
    <button id="botao-clique">Clique-me</button>
    <button id="botao-duplo-clique">Duplo Clique</button>
    
    <div>
        <input type="text" id="campo-texto" placeholder="Digite algo...">
        <p id="texto-digitado"></p>
    </div>
    
    <h2>Exemplos de Manipulação de Eventos</h2>
    <pre><code>// Adicionar evento com addEventListener
document.getElementById('botao').addEventListener('click', function() {
    alert('Botão clicado!');
});

// Evento de mouseover
elemento.addEventListener('mouseover', function() {
    this.style.backgroundColor = 'yellow';
});

// Evento de teclado
campoInput.addEventListener('keyup', function(e) {
    console.log('Tecla pressionada:', e.key);
});</code></pre>

    <script>
        // Evento de clique
        document.getElementById('botao-clique').addEventListener('click', function() {
            alert('Você clicou no botão!');
        });
        
        // Evento de duplo clique
        document.getElementById('botao-duplo-clique').addEventListener('dblclick', function() {
            document.getElementById('area-interacao').textContent = 'Duplo clique detectado!';
        });
        
        // Eventos de mouse
        const area = document.getElementById('area-interacao');
        area.addEventListener('mouseover', function() {
            this.style.backgroundColor = 'lightyellow';
            this.textContent = 'Mouse sobre a área';
        });
        
        area.addEventListener('mouseout', function() {
            this.style.backgroundColor = '#f9f9f9';
            this.textContent = 'Passe o mouse aqui';
        });
        
        // Evento de teclado
        document.getElementById('campo-texto').addEventListener('keyup', function(e) {
            document.getElementById('texto-digitado').textContent = 
                `Você digitou: ${this.value} (Última tecla: ${e.key})`;
        });
    </script>
</body>
</html>


funcoes
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Funções em JavaScript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        button {
            padding: 8px 15px;
            background-color: #9C27B0;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background-color: #7B1FA2;
        }
        #resultado {
            background-color: #f4f4f4;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Funções em JavaScript</h1>
    
    <div id="resultado"></div>
    
    <button onclick="saudacao()">Saudação Simples</button>
    <button onclick="calcular()">Calcular</button>
    <button onclick="usarFuncaoAnonima()">Função Anônima</button>
    <button onclick="usarArrowFunction()">Arrow Function</button>
    
    <h2>Tipos de Funções</h2>
    <pre><code>// Declaração de função
function soma(a, b) {
    return a + b;
}

// Expressão de função (função anônima)
const multiplicacao = function(a, b) {
    return a * b;
};

// Arrow function (ES6+)
const divisao = (a, b) => a / b;

// Função imediatamente invocada (IIFE)
(function() {
    console.log('Executada imediatamente');
})();</code></pre>
    
    <h2>Parâmetros e Retorno</h2>
    <pre><code>// Parâmetros padrão (ES6+)
function saudacao(nome = 'Visitante') {
    return `Olá, ${nome}!`;
}

// Retornando múltiplos valores
function calcular(a, b) {
    return {
        soma: a + b,
        subtracao: a - b,
        multiplicacao: a * b
    };
}</code></pre>

    <script>
        const resultado = document.getElementById('resultado');
        
        // Função simples
        function saudacao() {
            const nome = prompt('Qual seu nome?') || 'Visitante';
            resultado.innerHTML = `<p>Olá, ${nome}! Bem-vindo ao estudo de funções.</p>`;
        }
        
        // Função com retorno
        function calcular() {
            const num1 = parseFloat(prompt('Digite o primeiro número:')) || 0;
            const num2 = parseFloat(prompt('Digite o segundo número:')) || 0;
            
            const soma = num1 + num2;
            const subtracao = num1 - num2;
            const multiplicacao = num1 * num2;
            const divisao = num2 !== 0 ? num1 / num2 : '∞';
            
            resultado.innerHTML = `
                <h3>Resultados:</h3>
                <p>${num1} + ${num2} = ${soma}</p>
                <p>${num1} - ${num2} = ${subtracao}</p>
                <p>${num1} × ${num2} = ${multiplicacao}</p>
                <p>${num1} ÷ ${num2} = ${divisao}</p>
            `;
        }
        
        // Função anônima
        const funcaoAnonima = function() {
            return new Date().toLocaleTimeString();
        };
        
        function usarFuncaoAnonima() {
            resultado.innerHTML = `<p>Função anônima executada às: ${funcaoAnonima()}</p>`;
        }
        
        // Arrow function
        const quadrado = x => x * x;
        
        function usarArrowFunction() {
            const numero = parseFloat(prompt('Digite um número para elevar ao quadrado:')) || 0;
            resultado.innerHTML = `<p>${numero}² = ${quadrado(numero)}</p>`;
        }
    </script>
</body>
</html>

objetos
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Objetos em JavaScript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        button {
            padding: 8px 15px;
            background-color: #FF9800;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background-color: #F57C00;
        }
        #saida {
            background-color: #f4f4f4;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Objetos em JavaScript</h1>
    
    <div id="saida"></div>
    
    <button onclick="criarObjeto()">Criar Objeto</button>
    <button onclick="acessarPropriedades()">Acessar Propriedades</button>
    <button onclick="usarMetodos()">Usar Métodos</button>
    <button onclick="criarClasse()">Criar Classe</button>
    
    <h2>Criação de Objetos</h2>
    <pre><code>// Notação literal
const pessoa = {
    nome: 'João',
    idade: 30,
    profissao: 'Desenvolvedor',
    saudar: function() {
        return `Olá, meu nome é ${this.nome}!`;
    }
};

// Construtor Object
const carro = new Object();
carro.marca = 'Ford';
carro.modelo = 'Mustang';

// Função construtora
function Animal(nome, tipo) {
    this.nome = nome;
    this.tipo = tipo;
    this.emitirSom = function() {
        return `${this.nome} faz um som!`;
    };
}</code></pre>
    
    <h2>Classes (ES6+)</h2>
    <pre><code>class Produto {
    constructor(nome, preco) {
        this.nome = nome;
        this.preco = preco;
    }
    
    descrever() {
        return `${this.nome} custa R$${this.preco.toFixed(2)}`;
    }
    
    aplicarDesconto(percentual) {
        this.preco *= (1 - percentual/100);
    }
}</code></pre>

    <script>
        const saida = document.getElementById('saida');
        
        // Objeto literal
        const livro = {
            titulo: 'JavaScript: O Guia Definitivo',
            autor: 'David Flanagan',
            paginas: 1080,
            editora: 'Bookman',
            informacoes: function() {
                return `${this.titulo} por ${this.autor}, ${this.paginas} páginas`;
            }
        };
        
        function criarObjeto() {
            saida.innerHTML = `
                <h3>Objeto Livro:</h3>
                <pre>${JSON.stringify(livro, null, 2)}</pre>
                <p>${livro.informacoes()}</p>
            `;
        }
        
        function acessarPropriedades() {
            saida.innerHTML = `
                <h3>Acessando Propriedades:</h3>
                <ul>
                    <li>livro.titulo: ${livro.titulo}</li>
                    <li>livro['autor']: ${livro['autor']}</li>
                    <li>Propriedades: ${Object.keys(livro).join(', ')}</li>
                </ul>
            `;
        }
        
        function usarMetodos() {
            // Adicionando nova propriedade dinamicamente
            livro.anoPublicacao = 2020;
            
            // Adicionando novo método
            livro.resumo = function() {
                return `${this.titulo} foi publicado por ${this.editora} em ${this.anoPublicacao || 'ano desconhecido'}.`;
            };
            
            saida.innerHTML = `
                <h3>Métodos do Objeto:</h3>
                <p>${livro.informacoes()}</p>
                <p>${livro.resumo()}</p>
            `;
        }
        
        // Classe
        class Aluno {
            constructor(nome, curso, matricula) {
                this.nome = nome;
                this.curso = curso;
                this.matricula = matricula;
                this.notas = [];
            }
            
            adicionarNota(nota) {
                this.notas.push(nota);
            }
            
            calcularMedia() {
                if (this.notas.length === 0) return 0;
                const soma = this.notas.reduce((total, nota) => total + nota, 0);
                return soma / this.notas.length;
            }
            
            situacao() {
                const media = this.calcularMedia();
                return media >= 7 ? 'Aprovado' : media >= 5 ? 'Recuperação' : 'Reprovado';
            }
        }
        
        function criarClasse() {
            const aluno1 = new Aluno('Maria', 'Engenharia', '2023001');
            aluno1.adicionarNota(8.5);
            aluno1.adicionarNota(7.0);
            aluno1.adicionarNota(9.2);
            
            const aluno2 = new Aluno('Carlos', 'Medicina', '2023002');
            aluno2.adicionarNota(6.0);
            aluno2.adicionarNota(4.5);
            aluno2.adicionarNota(5.8);
            
            saida.innerHTML = `
                <h3>Exemplo de Classe:</h3>
                <table>
                    <tr>
                        <th>Nome</th>
                        <th>Curso</th>
                        <th>Notas</th>
                        <th>Média</th>
                        <th>Situação</th>
                    </tr>
                    <tr>
                        <td>${aluno1.nome}</td>
                        <td>${aluno1.curso}</td>
                        <td>${aluno1.notas.join(', ')}</td>
                        <td>${aluno1.calcularMedia().toFixed(2)}</td>
                        <td>${aluno1.situacao()}</td>
                    </tr>
                    <tr>
                        <td>${aluno2.nome}</td>
                        <td>${aluno2.curso}</td>
                        <td>${aluno2.notas.join(', ')}</td>
                        <td>${aluno2.calcularMedia().toFixed(2)}</td>
                        <td>${aluno2.situacao()}</td>
                    </tr>
                </table>
            `;
        }
    </script>
</body>
</html>

async
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Programação Assíncrona em JavaScript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        button {
            padding: 8px 15px;
            background-color: #607D8B;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background-color: #455A64;
        }
        #resultado {
            background-color: #f4f4f4;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }
        .carregando {
            color: #2196F3;
            font-weight: bold;
        }
        .erro {
            color: #F44336;
            font-weight: bold;
        }
        #posts-container {
            margin-top: 20px;
        }
        .post {
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <h1>Programação Assíncrona em JavaScript</h1>
    
    <div id="resultado">Resultados aparecerão aqui...</div>
    
    <button onclick="usarCallbacks()">Usar Callbacks</button>
    <button onclick="usarPromises()">Usar Promises</button>
    <button onclick="usarAsyncAwait()">Usar Async/Await</button>
    <button onclick="buscarPosts()">Buscar Posts da API</button>
    
    <div id="posts-container"></div>
    
    <h2>Callbacks</h2>
    <pre><code>function fazerAlgoAsync(callback) {
    setTimeout(() => {
        callback('Dados processados');
    }, 1000);
}

fazerAlgoAsync((resultado) => {
    console.log(resultado); // "Dados processados" após 1 segundo
});</code></pre>
    
    <h2>Promises</h2>
    <pre><code>function carregarDados() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const sucesso = Math.random() > 0.3;
            if (sucesso) {
                resolve('Dados carregados com sucesso');
            } else {
                reject('Erro ao carregar dados');
            }
        }, 1500);
    });
}

carregarDados()
    .then(resultado => console.log(resultado))
    .catch(erro => console.error(erro));</code></pre>
    
    <h2>Async/Await</h2>
    <pre><code>async function processarDados() {
    try {
        const resultado = await carregarDados();
        console.log(resultado);
    } catch (erro) {
        console.error(erro);
    }
}

processarDados();</code></pre>

    <script>
        const resultado = document.getElementById('resultado');
        const postsContainer = document.getElementById('posts-container');
        
        // Exemplo com Callbacks
        function usarCallbacks() {
            resultado.innerHTML = '<p class="carregando">Processando com callback (aguarde 2 segundos)...</p>';
            
            setTimeout(function() {
                const sucesso = Math.random() > 0.5;
                if (sucesso) {
                    resultado.innerHTML = '<p>Callback executado com sucesso!</p>';
                } else {
                    resultado.innerHTML = '<p class="erro">Erro no callback!</p>';
                }
            }, 2000);
        }
        
        // Exemplo com Promises
        function simularRequisicao() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    const sucesso = Math.random() > 0.5;
                    if (sucesso) {
                        resolve('Dados recebidos da Promise!');
                    } else {
                        reject('Falha na Promise!');
                    }
                }, 1500);
            });
        }
        
        function usarPromises() {
            resultado.innerHTML = '<p class="carregando">Processando com Promise (aguarde 1.5 segundos)...</p>';
            
            simularRequisicao()
                .then(mensagem => {
                    resultado.innerHTML = `<p>${mensagem}</p>`;
                })
                .catch(erro => {
                    resultado.innerHTML = `<p class="erro">${erro}</p>`;
                });
        }
        
        // Exemplo com Async/Await
        async function usarAsyncAwait() {
            resultado.innerHTML = '<p class="carregando">Processando com Async/Await (aguarde 1.5 segundos)...</p>';
            
            try {
                const resposta = await simularRequisicao();
                resultado.innerHTML = `<p>${resposta} (via Async/Await)</p>`;
            } catch (erro) {
                resultado.innerHTML = `<p class="erro">${erro} (via Async/Await)</p>`;
            }
        }
        
        // Exemplo com Fetch API
        async function buscarPosts() {
            postsContainer.innerHTML = '<p class="carregando">Carregando posts da API...</p>';
            
            try {
                const resposta = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');
                
                if (!resposta.ok) {
                    throw new Error(`Erro HTTP: ${resposta.status}`);
                }
                
                const posts = await resposta.json();
                
                postsContainer.innerHTML = '';
                posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.className = 'post';
                    postElement.innerHTML = `
                        <h3>${post.title}</h3>
                        <p>${post.body}</p>
                    `;
                    postsContainer.appendChild(postElement);
                });
                
                resultado.innerHTML = '<p>Posts carregados com sucesso da API!</p>';
            } catch (erro) {
                postsContainer.innerHTML = `<p class="erro">Falha ao carregar posts: ${erro.message}</p>`;
            }
        }
    </script>
</body>
</html>